function [y1] = trainedModel_bayesian_10(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 03-Feb-2021 16:31:15.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx4 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1;-1;-1;-1];
x1_step1.gain = [1;1;1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.00020374102829162071414;7.0126156728839161587e-05;-0.7390724157575042641;-0.24539083879199916072;-0.18826052314958152678;0.00019657492514679874717;0.24777172321970633573;-0.00089998200926857865184;-1.4731918873319180818;-1.4718601014417360684];
IW1_1 = [0.0044133835689967844743 -1.8419871654076263034 4.2583566962926662214 -4.2798089556580691806;-0.0040910301717152035283 2.3076714881723527917 -0.40840721827630482865 1.3241670906525431217;1.0160958909137329798 -0.76257643991045964693 -0.48097314103580013356 -0.37798932350316116757;-0.011665813074689241474 5.0928018325224435614 -9.5157425573769600646 9.9858556666497158005;-1.3603802185983404627 -1.690737064859821448 0.98083215211098451203 -0.29000727045796453885;-0.0047250110398391401145 1.7660720033985697341 -5.9132608172967788818 5.5979388917818031501;-0.011688839459249894537 5.0959849147444362671 -9.5174800932905050388 9.9887118569836736981;0.011026262183196770469 -4.9070835411217252897 8.4816554645650246158 -9.0640235160167303974;-0.00020447404633510400142 0.9510408214983147035 5.2782140917184090512 -3.8250135163930223392;0.00031012840597615179417 -0.94861670620121418818 -5.2649933917114779547 3.8150147698169329935];

% Layer 2
b2 = 0.0041679854424758831094;
LW2_1 = [10.576437729164853252 2.31135330549225948 -0.00023488422783388791457 -4.9739486117770113083 0.00036021115552643058521 8.0025520256337170366 -4.9625831256155024107 -9.8215224031611363387 -1.2744481816066182134 1.2795563995968399773];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1;
y1_step1.xoffset = -1;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
