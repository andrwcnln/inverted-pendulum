function [y1] = trainedModel_conjugate_20_adapt(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 14-Feb-2021 14:18:55.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx4 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1;-1;-1;-0.999999999999325];
x1_step1.gain = [1;1;1;1.00000000000034];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.1895481608749887137;-2.6539137582082075184;2.4924885305006969638;-2.1075570548266986393;-1.8073368770494993019;1.3652450131960127688;0.89796552172629096056;-0.80564957249158364316;-0.29234033335873005344;-0.16725017252131263445;-0.84156941756229486362;0.46796514421952384311;0.80893265182506679523;-1.4024542345057344761;2.0351187827662284846;-1.8942024249836801886;-2.0535410154382529591;2.4457538693898377424;2.6946686825328396431;2.9445862311867729844];
IW1_1 = [1.4123852893035395706 1.6829822397709486292 -0.2326034634085416275 1.7864244070414716514;1.4030098132812753864 -2.235081282938943037 -0.86955466551557358823 -1.2039207403787821615;-1.7149439386108864536 1.6241120962607626943 1.5514427587991670432 0.17253819488184238273;1.7311164152181526266 1.8138543531224522454 1.2094526173045083706 0.81698667077970577033;0.7589475996907887323 0.59840331183818762373 -1.5575302529043328903 2.235733792624988503;-1.9066698101419456979 1.0644038768102661585 -0.25121679623820741822 1.9248265242483511006;-1.4999167710871954551 2.3245803049012798702 -0.260068099914359252 0.67678273163630142673;0.7297956942437472394 -0.11297275664666187045 0.68566815898659683182 -2.7854547558249427297;2.0644580389932207787 0.62269989035559314416 1.1307548226647152756 -1.571953380889256513;1.9600432504716722715 -1.4462992949855812963 1.0546717554151046059 -1.0447011349240575839;-1.176876717054742949 1.2310869520658105358 -1.0958269102093320946 1.4690798445607564648;1.386889934868475116 -1.8120693746193621276 0.59153931130414383333 -1.2777031637715896562;2.0421974463530845334 -1.2173159317048769523 0.63463127028361243642 1.4912945540692379431;-0.0061299142443028012753 -2.1569216451070123419 -1.4800021775652036915 -1.1908403920238141982;0.18017080344280164694 -2.2374729603046801252 -1.5299184299487464944 0.59673641779284603004;-1.8131120208502837787 1.7033925762279138461 0.086538213189123650015 -0.81304502582848314773;-0.21821578485126050251 1.2768933483510749305 2.2518425843933900232 -1.625124684680142817;2.1408582261086062104 -0.99214422381033617881 -0.88157374400681265403 -1.3347146407885110975;0.55016864968093937005 2.7782338251195777268 1.0580122537423910511 0.83111688027620922448;1.9637780144375867053 -1.8558188080003437115 -1.1651500740970730519 -0.098785675926396268598];

% Layer 2
b2 = 0.0039715341739629877668;
LW2_1 = [-0.78894565077274059206 0.54917706167269297879 0.31303766358792778357 0.045507361718834626885 0.23121959273542286306 0.012615337616814232408 0.037162675763988697875 0.1547472998364215202 -0.055197517034247668699 0.076393616801815167339 -0.18791213047358501509 -0.20025796859269612282 0.032150015488387174989 0.013219070931726823598 0.70375263838632395874 0.12212635045762189334 0.35727483716867208807 0.084948823637523346308 -0.55957712081326316245 -0.028102802522181294376];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1;
y1_step1.xoffset = -1;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
