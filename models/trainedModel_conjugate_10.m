function [y1] = trainedModel_conjugate_10(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 08-Feb-2021 16:55:06.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx4 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1;-1;-1;-1];
x1_step1.gain = [1;1;1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.4880663425684947931;-1.9813850827170487179;1.294349499805037329;-1.1075418737286328863;-1.3530182381215682952;-0.30068026450249857318;-0.61614297199152157081;1.6662277064035913021;1.9765473400788517999;2.427083437709271152];
IW1_1 = [0.97459573250696929225 -1.5170498888856780439 0.90698916751320968199 1.1865692854625240482;1.0571198763316658198 1.1873147533772849815 -1.2953900044243071843 -1.3261781835600972013;-1.3056348895967266888 1.4575796562726810457 1.1018025235130779471 -0.85647253014536051108;-0.025666021741141270551 0.61578534328791989516 1.0633727495533848995 -2.1148536817082250749;0.0029152397315279519538 2.4113647135611908645 0.8777561145107557472 -1.0369038842861464378;-1.3445033867741351674 -1.4078971468126439959 0.94500183688641148372 1.173726448300417502;-1.3978568598592702177 -0.39334324322365088467 1.5150490980411166486 1.354208402632327779;0.034838031613841920209 2.9909524305128192267 -0.0065180154724670067573 -0.15082870013527066577;1.4717695816052971391 1.0627710824721912086 0.37647592274951297009 1.4919612237121155918;0.47154790748411951062 1.5401643827247522012 -0.96564350300244627956 -1.5296204460080695675];

% Layer 2
b2 = 0.16808816341946586359;
LW2_1 = [-0.16051425911322039775 0.031838339493009355785 -0.011464424793651199416 0.85365740498144448978 -0.7094851715696102179 0.0027953670198584395362 -0.0099129091178386183336 -0.57790314834330014371 -0.014238613637698438116 0.33168704169047497077];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1;
y1_step1.xoffset = -1;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
